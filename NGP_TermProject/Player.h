#pragma once
#include "Object.h"
#include "StateMachine.h"

#define PLAYER_SIZE 100
#define FRAME_SPEED 6
#define PLAYER_MOVE_SPEED 170

enum Direction{ Left, Right };

class Player :    
	public Object
{
public:
	Player();
	~Player();

	void Update(float elapsed);
	void Draw(HDC& memDc);

	void ChangeState(State<Player>* cState);

	void OnProcessingMouseMessage(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam);
	void OnProcessingKeyboardMessage(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam);

	void UiDraw(HDC& memDc);

public:
	virtual CImage GetImg() const { return *m_pImg; }
	Direction GetDir() const { return m_dDir; }

	void SetDir(Direction dir) { m_dDir = dir; }
	void SetImg(const TCHAR* str);
	void SetSpeed(const int speed) { m_iSpeed = speed; }
	void SetRectByLocation() {
		m_rRect.left = (int)m_Location.x;
		m_rRect.top = (int)m_Location.y;
		m_rRect.right = (int)m_Location.x + PLAYER_SIZE;
		m_rRect.bottom = (int)m_Location.y + PLAYER_SIZE;
	}

private:
	Direction	m_dDir;			// 방향
	int			m_iSpeed;		// 이동속도
	CImage*		m_pImg;			// 그릴 이미지
	CImage*		m_pUltiImg;		// 각성기 이미지
	CImage*		m_pDeck;		// 카드 뒷면 이미지
	CImage*		m_pManaImg[2];	// 마나 이미지

	int			m_iFrameMax;	// 스프라이트 이미지의 프레임 수
	int			m_iFrameIdx;	// 현재 스프라이트 이미지의 프레임 번호
	float		m_fFrameTime;	// 현재 스프라이트가 사용된 시간

	int			m_iUltimate;	// 궁극기 게이지
	int			m_iCardCount;	// 남은 카드 개수
	int			m_iHandCardCount;	// 손에있는 카드 개수
	int			m_iDeadCardCount;	// 쓴 카드 개수
	int			m_iMaxMana;		// 최대 마나
	int			m_iManaCount;	// 사용가능한 남은 마나
	int			m_iLevel;		// 레벨

	int			m_iExperience;			// 경험치
	int			m_iExperienceBar[10];	// 현 레벨의 경험치 최대량

	StateMachine<Player>* m_pStateMachine;

};

